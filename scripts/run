#!/bin/bash

# --- Run application as either a Go file, a Go binary, a or Docker image (and potentially as a daemon if Docker image) --- #

set -e # exit if any child script exits with non-zero status

# ======== PARSE ARGS ======== #

this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
run_env="$1"
run_format="$2"
go_build_output_dir="./bin"
envs_dir="./envs"
registries_path="./registries.json"

# ======== VALIDATE ARGS ======== #

$this_dir/validate_arg "env" "$run_env" "local|dev|staging|prod"
$this_dir/validate_arg "format" "$run_format" "image|binary|file"

# ======== RUN APP ======== #

# Run app as a Docker image.
if [[ "$run_format" = "image" ]]; then
	# Use run env and registries config to determine the image tag to look for.
	image_org=$( cat "$registries_path" | jq -r ".$run_env.org" )
	image_name=$( cat "$registries_path" | jq -r ".$run_env.image" )

	# Sub null values for empty strings.
	if [[ "$image_org" = "null" ]]; then
		image_org=""
	fi

	if [[ "$image_name" = "null" ]]; then
		image_name=""
	fi

	if [ "$image_org" == "" ] || [ "$image_name" == "" ]; then
		echo "Error constructing image tag: values for \"$run_env.org\" and \"$run_env.image\" inside \"$registries_path\" must be non-empty strings."
	fi

	image_repo="$image_org/$image_name"

	# Get latest image version for this image.
	image_version="$( docker images $image_repo | sed -n 2p | awk '{print $2}' )"

	if [[ ! "$image_version" ]]; then
		echo "Couldn't find tag for Docker repository \"$image_repo\"...Exiting."
		exit 1
	fi

	if [[ "$image_version" == "<none>" ]]; then
		echo "Tag for latest Docker repository \"$image_repo\" can't be \"<none>\"...Exiting."
		exit 1
	fi

	# Run Docker image.
	docker run \
		-v /var/run/docker.sock:/var/run/docker.sock \
		--env-file="$envs_dir/$run_env.env" \
		"$image_repo:$image_version"

elif [[ "$run_format" = "binary" ]]; then
	# Run app as Go binary.
	$go_build_output_dir/main
else
	# Run app as Go file.
	go run main.go
fi